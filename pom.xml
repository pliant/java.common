<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>code.pliant.common</groupId>
	<artifactId>parent</artifactId>
	<version>0.1.0-SNAPSHOT</version>

	<packaging>pom</packaging>

	<name>Pliant Java Common Parent Project</name>
	<description>Establishes default dependencies, properties, repositories, etc, for all sub-projects.</description>

	<properties>
		<java.version>1.6</java.version>
		<spring.version>3.0.5.RELEASE</spring.version>
		<camel.version>2.8.2</camel.version>
		<slf4j.version>1.6.1</slf4j.version>
		
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<build>

		<!-- Naming pattern used to name the build artifacts, not including any 
			build specific extensions(jar, war, ear). -->
		<finalName>${project.artifactId}-${project.version}</finalName>

		<!-- Set The Resource Directories Used. -->
		<resources>
			<resource>
				<directory>src/main/java</directory>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>target/generated/java</directory>
			</resource>
			<resource>
				<directory>target/generated/resources</directory>
			</resource>
		</resources>

		<pluginManagement>
			<plugins>
				<!-- Purpose: Plugin for generating java classes. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.3.2</version>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
					</configuration>
				</plugin>

				<!-- Purpose: Plugin For Building JARs. Used automatically with at package 
					type of 'jar'. Here we are indicating to not put the java files in the jars. 
					This is handled separately. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.3.1</version>
					<configuration>
						<excludes>
							<exclude>**/*.java</exclude>
						</excludes>
					</configuration>
				</plugin>


				<!-- Purpose: Plugin For Generating Report Sites. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>2.2</version>
				</plugin>

				<!-- Purpose: Plugin For Creating Releases. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.2.1</version>
				</plugin>

				<!-- Purpose: Plugin For Creating Releases. -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>1.2</version>
				</plugin>

				<!-- Purpose: Plugin That Generates A Sources JAR. This is used to create 
					the -sources.jar file. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.1.2</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<phase>verify</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- Generates JavaDoc documentation for the report site 
					 @see http://maven.apache.org/plugins/index.html -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>2.7</version>
					<configuration>
						<minmemory>128m</minmemory>
						<maxmemory>512m</maxmemory>
					</configuration>
					<executions>
						<execution>
							<id>attach-javadoc</id>
							<phase>verify</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			
				<!-- Purpose: Plugin Used For Running Test Cases. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.8</version>
					<configuration>
						<systemPropertyVariables>
							<!-- Set The Timezone To UTC -->
							<user.timezone>UTC</user.timezone>
							<forkMode>pertest</forkMode>
							<argLine>-Xms768m -Xmx768m</argLine>
							<testFailureIgnore>false</testFailureIgnore>
							<skip>false</skip>
						</systemPropertyVariables>
					</configuration>
				</plugin>
				
				<!-- Reports how much of the code in a project is covered in test cases. 
					 @see http://mojo.codehaus.org/ -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>cobertura-maven-plugin</artifactId>
					<version>2.4</version>
					<configuration>
						<formats>
							<format>xml</format>
						</formats>
					</configuration>
					<executions>
						<execution>
							<id>generate-coverage</id>
							<phase>verify</phase>
							<goals>
								<goal>cobertura</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- Purpose: Plugin for generating Java classes from XML Schemas. -->
				<plugin>
					<groupId>org.jvnet.jaxb2.maven2</groupId>
					<artifactId>maven-jaxb2-plugin</artifactId>
					<version>0.8.0</version>

					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
						<generateDirectory>${project.build.directory}/generated/java</generateDirectory>
					</configuration>

					<executions>
						<execution>
							<goals>
								<goal>generate</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				
				<!-- 
					Purpose: Plugin used to connect to a Sonar server to analyze and record metrics.  This plugin should be 
						executed only on the CI server.  The sonar.version property is set in the settings.xml configuration 
						being used to run the sonar plugin.  This is so the POM does not need to be changed if the sonar 
						version is upgraded.  This property does not need to be set anywhere except on the CI server, as 
						individual developers should not be sending metrics to the server.
				 -->
				<plugin>
					<groupId>org.codehaus.sonar</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>${sonar.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<!-- Title: Reporting Plugins Description: The configuration indicates what 
		reporting mojos are run when the reporting site is generated. There are more 
		mojos available. What is configured below is just some of the more common 
		components that are included in reports. Report generation is accomplished 
		by running a 'mvn site' on the POM. -->
	<reporting>
		<plugins>
			<!-- Generates project specific information. @see http://maven.apache.org/plugins/index.html -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.3.1</version>
				<reportSets>
					<reportSet>
						<reports>
							<!-- 
							<report>dependencies</report>
							<report>dependency-convergence</report>
							<report>cim</report>
							<report>scm</report>
							 -->
							<report>project-team</report>
							<report>index</report>
							<report>summary</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>

			<!-- Generates JavaDoc documentation for the report site @see http://maven.apache.org/plugins/index.html -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<minmemory>128m</minmemory>
					<maxmemory>512m</maxmemory>
				</configuration>
			</plugin>

			<!-- Reports on test results for test classes. @see http://maven.apache.org/plugins/index.html -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.8</version>
			</plugin>

			<!-- Reports on changes in the source code between releases. @see http://mojo.codehaus.org/ -->
			<!-- 
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-changelog-plugin</artifactId>
				<version>2.2</version>
			</plugin>
			 -->
			 
			<!-- Reports any tags in code such as @todo or //TODO @see http://mojo.codehaus.org/ -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>taglist-maven-plugin</artifactId>
				<version>2.4</version>
			</plugin>

			<!-- Reports how much of the code in a project is covered in test cases. 
				@see http://mojo.codehaus.org/ -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.4</version>
			</plugin>
		</plugins>
	</reporting>
	
	<modules>
		<module>test</module>
		<module>core</module>
		<module>xml</module>
		<module>spring</module>
		<module>jpa</module>
		<module>camel</module>
		<module>jms</module>
		<module>maven</module>
	</modules>
	
</project>
